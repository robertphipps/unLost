@using System.Linq;
@{
    ViewData["Title"] = "List Items";
    var m = (unLost.Web.Models.ViewModels.ListItemsModel)Model;
    var items = m.items;
    string modeString;
    switch (m.mode)
    {
        case "All":
            modeString = "";
            break;
        case "Archive":
            modeString = "archived";
            break;
        default:
            modeString = "uncollected";
            break;
    }
    var categories = new ItemCategories();
}

<h1>@ViewData["Title"]</h1>
<p><a class="btn btn-default" href="/Items/Edit"><span class="glyphicon glyphicon-plus-sign"></span> Add Item</a></p>
<div class="btn-group">
    <a href="/Items/List/All" class="btn btn-default @(modeString == "" ? "active" : "")">Show all</a>
    <a href="/Items/List/Archive" class="btn btn-default @(modeString == "archived" ? "active" : "")">Show collected</a>
    <a href="/Items/List/" class="btn btn-default @(modeString == "uncollected" ? "active" : "")">Show new</a>
</div>

<div class="itemsTable">
    <input class="search" placeholder="Search" />
    <table class="table table-hover">
        <caption>Found @items.Count() @modeString items</caption>
        <thead>
            <tr>
                <th>Log #</th>
                <th class="sort" data-sort="added">Added</th>
                <th class="sort" data-sort="forename">Pupil Forename</th>
                <th class="sort" data-sort="surname">Pupil Surname</th>
                <th>Item Category</th>
                <th>Description</th>
                <th>Tutor Gp</th>
                <th>Tutor</th>
                <th>Edit</th>
                <th>Collected?</th>
            </tr>
        </thead>
        <tbody class="list">
            @if (items.Count() == 0)
            {
                <tr>
                    <td colspan="10" align="center"><em>No items found</em></td>
                </tr>
            }
            else
            {
                foreach (var i in items)
                {
                    <tr>
                        <td class="logno">@(i.ItemLogNo != null ? i.ItemLogNo.ToString() : "-")</td>
                        <td class="added">@i.Added.ToShortDateString()</td>
                        <td class="forename">@(i.Pupil != null ? i.Pupil.Forename : "n/a")</td>
                        <td class="surname">@(i.Pupil != null ? i.Pupil.Surname : "n/a")</td>
                        <td class="cat">@categories.CategoryDictionary[i.ItemCat] - @categories.SubcatDictionaryDictionary[i.ItemCat][i.ItemSubcat]</td>
                        <td class="desc">@i.ItemDesc</td>
                        <td class="tutorgp">@(i.Pupil.TutorGp != null ? i.Pupil.TutorGp.Name : "n/a")</td>
                        <td class="tutor">@(i.Pupil.TutorGp != null ? i.Pupil.TutorGp.Tutor : "n/a")</td>
                        <td>
                            <a asp-controller="Items" asp-action="Edit" asp-route-id="@i.ItemId"><span class="glyphicon glyphicon-pencil"></span></a>
                        </td>
                        <td>
                            @if (i.Collected.HasValue)
                            {
                                <em>Yes - @(i.Collected.Value.ToShortDateString())</em>
                            }
                            else
                            {
                                <a asp-controller="Items" asp-action="Archive" asp-route-id="@i.ItemId"><span class="glyphicon glyphicon-ok"></span></a>
                            }

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


@section Scripts {
    <script src="~/lib/list.js/dist/list.min.js"></script>
    <script>
        var o = {
                                        valueNames: ['id', 'added', 'cat', 'subcat', 'desc', 'pupil', 'mailed']
        };
        var itemList = new List('itemsTable', o);
    </script>
}